/*
 *  stream.js
 *
 *  David Janes
 *  IOTDB.org
 *  2017-02-18
 *
 *  Copyright [2013-2017] [David P. Janes]
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

"use strict";

const util = require('util');
const stream = require('stream');

const _ = {
    is: require("./is").is,
};

/**
 *  Inspired by:
 *  https://github.com/gagle/node-streamifier
 */
const create_stream = (o, initd) => {
    initd = initd || {};

    const ObjectStream = function() {
        const self = this;

        if (_.is.Buffer(o) || _.is.String(o)) {
            stream.Readable.call(self, {
                encoding: initd.encoding
            });
        } else {
            stream.Readable.call(self, {
                objectMode: true
            });
        }

        console.log("HERE:XXX", initd.path)
        if (initd.path) {
            self.path = initd.path;
        }
    };

    util.inherits(ObjectStream, stream.Readable);

    ObjectStream.prototype._read = function () {
        const self = this;

        self.push(o);
        o = null;
    };

    return new ObjectStream();
};

exports.stream = {
    create: create_stream,
};


